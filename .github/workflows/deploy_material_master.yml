name: Deploy materialize-master

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'cloud_function/materialize-master/**'
      - '.github/workflows/deploy-materialize-master.yml'

permissions:
  contents: read
  id-token: write   # required for Workload Identity Federation

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT }}
  REGION: ${{ vars.GCP_REGION }}
  FUNCTION_NAME: materialize-master
  FUNCTION_DIR: cloud_function/materialize-master
  RUNTIME: python312
  BUCKET_NAME: ${{ vars.GCS_BUCKET }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.DEPLOYER_SA }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Verify source
        run: |
          ls -la "${FUNCTION_DIR}"
          test -f "${FUNCTION_DIR}/main.py"
          test -f "${FUNCTION_DIR}/requirements.txt"

      - name: Deploy Cloud Function (Gen2, HTTP)
        run: |
          gcloud functions deploy "${FUNCTION_NAME}" \
            --gen2 \
            --region="${REGION}" \
            --runtime="${RUNTIME}" \
            --source="${FUNCTION_DIR}" \
            --entry-point="materialize_http" \
            --trigger-http \
            --set-env-vars="GCS_BUCKET=${BUCKET_NAME},STRUCTURED_PREFIX=structured"

      - name: Get Function URL
        id: cfurl
        run: |
          URL=$(gcloud functions describe "${FUNCTION_NAME}" --gen2 --region="${REGION}" --format='value(serviceConfig.uri)')
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Grant run.invoker to deployer SA
        run: |
          gcloud functions add-invoker-policy-binding "${FUNCTION_NAME}" \
            --gen2 --region="${REGION}" \
            --member="serviceAccount:${{ vars.DEPLOYER_SA }}"

      - name: Ensure Scheduler API enabled (best-effort)
        run: |
          gcloud services enable cloudscheduler.googleapis.com || echo "No permission to enable; assuming it's already on."

      - name: Create/Update Cloud Scheduler job (:10 each hour)
        shell: bash
        run: |
          set -euo pipefail
          gcloud config set project "${PROJECT_ID}"
          JOB_NAME="materialize-master-hourly"
          FUNCTION_URL="${{ steps.cfurl.outputs.url }}"
          test -n "${FUNCTION_URL}"

          if gcloud scheduler jobs describe "$JOB_NAME" --location="${REGION}" >/dev/null 2>&1; then
            gcloud scheduler jobs update http "$JOB_NAME" \
              --location="${REGION}" \
              --schedule="10 * * * *" \
              --time-zone="America/New_York" \
              --uri="${FUNCTION_URL}" \
              --http-method=POST \
              --oidc-service-account-email="${{ vars.DEPLOYER_SA }}"
          else
            gcloud scheduler jobs create http "$JOB_NAME" \
              --location="${REGION}" \
              --schedule="10 * * * *" \
              --time-zone="America/New_York" \
              --uri="${FUNCTION_URL}" \
              --http-method=POST \
              --oidc-service-account-email="${{ vars.DEPLOYER_SA }}"
          fi
