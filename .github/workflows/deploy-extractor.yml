name: Deploy extractor-per-listing (Gen2)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'cloud_functions/extractor-per-listing/**'
      - '.github/workflows/deploy-extractor.yml'

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  FUNCTION_NAME: extractor-per-listing
  FUNCTION_DIR: functions/extractor-per-listing
  RUNTIME: python312
  BUCKET_NAME: ${{ secrets.GCS_BUCKET }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Verify source contents
        run: |
          ls -la "${FUNCTION_DIR}"
          test -f "${FUNCTION_DIR}/main.py"
          test -f "${FUNCTION_DIR}/requirements.txt"

      - name: Deploy Cloud Function (Gen2, HTTP, authenticated)
        run: |
          gcloud functions deploy "${FUNCTION_NAME}" \
            --gen2 \
            --region="${REGION}" \
            --runtime="${RUNTIME}" \
            --source="${FUNCTION_DIR}" \
            --entry-point="extract_http" \
            --trigger-http \
            --set-env-vars="GCS_BUCKET=${BUCKET_NAME},SCRAPES_PREFIX=scrapes,STRUCTURED_PREFIX=structured"

      - name: Get Function URL
        id: cfurl
        run: |
          URL=$(gcloud functions describe "${FUNCTION_NAME}" --gen2 --region="${REGION}" --format='value(serviceConfig.uri)')
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      # Ensure the scheduler can invoke it via OIDC using the same deployer SA
      - name: Grant run.invoker to Scheduler invoker SA (optional if already set)
        run: |
          # If you have a dedicated scheduler SA, substitute it here.
          INVOKER_SA="${{ secrets.SERVICE_ACCOUNT_EMAIL }}"
          gcloud functions add-invoker-policy-binding "${FUNCTION_NAME}" \
            --gen2 --region="${REGION}" \
            --member="serviceAccount:${INVOKER_SA}"

      - name: Create or Update Cloud Scheduler job (:05 past each hour)
        run: |
          JOB_NAME="extract-per-listing-hourly"
          FUNCTION_URL="${{ steps.cfurl.outputs.url }}"

          # Create or update with OIDC to the same service account
          if gcloud scheduler jobs describe "$JOB_NAME" --location="${REGION}" >/dev/null 2>&1; then
            gcloud scheduler jobs update http "$JOB_NAME" \
              --location="${REGION}" \
              --schedule="5 * * * *" \
              --time-zone="America/New_York" \
              --uri="${FUNCTION_URL}" \
              --http-method=POST \
              --message-body='{"overwrite": true, "max_files": 0}' \
              --oidc-service-account-email="${{ secrets.SERVICE_ACCOUNT_EMAIL }}"
          else
            gcloud scheduler jobs create http "$JOB_NAME" \
              --location="${REGION}" \
              --schedule="5 * * * *" \
              --time-zone="America/New_York" \
              --uri="${FUNCTION_URL}" \
              --http-method=POST \
              --message-body='{"overwrite": true, "max_files": 0}' \
              --oidc-service-account-email="${{ secrets.SERVICE_ACCOUNT_EMAIL }}"
          fi

      - name: Smoke test invoke (OIDC)
        run: |
          FUNCTION_URL="${{ steps.cfurl.outputs.url }}"
          curl -s -X POST "$FUNCTION_URL" \
            -H "Authorization: Bearer $(gcloud auth print-identity-token)" \
            -H "Content-Type: application/json" \
            -d '{"overwrite": true, "max_files": 3}' | jq .
